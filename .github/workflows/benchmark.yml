name: run_benchmarks

on:
  # runs the benchmark workflow only if it is manually triggered (POST API request)
  repository_dispatch:
    types: [run_benchmarks]

env:
  # the instance type to be used for the EC2 benchmarking VMs
  ec2-instance-type: m5n.large
  # the AMI for the EC2 VMs (Ubuntu 20.04 + Docker)
  ami-ubuntu-docker: ami-0da952e8afc41613f
  # the instance profile to be bound to the EC2 VM that allows SSM access
  iam-instance-profile-ssm: Arn=arn:aws:iam::400029883903:instance-profile/ec2-amazonSSMFullAccess
  # root volume size (GB) of the EC2 VM
  ec2-volume-size: 25
  # S3 repository URL
  s3-repository-url: s3://sok-repository-eval-benchmarks
  # the AWS user's access key ID
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  # the AWS user's secret access key
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  # the default AWS region to be used for the AWS CLI
  AWS_DEFAULT_REGION: us-east-2
  # terminate instance automatically after N minutes - this is important if the
  # machine or the workflow had an error
  instance-termination-timeout: 30

jobs:
  # A job that creates a unique timestamp for each benchmark run. This is only executed once over all benchmarks so that
  # all benchmarks write to the same folder (folder name is derived from the timestamp).
  setup:
    runs-on: ubuntu-20.04
    # Maps the step output to the job output
    # see https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjobs_idoutputs.
    outputs:
      ts: ${{ steps.get_time.outputs.timestamp }}
    steps:
      - name: Get timestamp of workflow start
        id: get_time
        run: echo "::set-output name=timestamp::$(date +'%Y%m%d_%H%M%S')"

  run-benchmarks:
    # ensure that job defining the output folder's name is executed first
    needs: setup
    runs-on: ubuntu-20.04
    # the strategy executes this job (i.e., all steps of it) in parallel for each of the given tools
    strategy:
      matrix:
        # TODO Uncomment this to run benchmarks in all programs
        # this must match the tool's directory name in the SoK repo
        # tool: [SEAL, Lobster, ALCHEMY, Cingulata, SEALion]
        tool: [SEAL]
    steps:
      # create a AWS EC2 instance and wait until it is ready to accept SSM commands
      - name: create a new AWS EC2 instance with Ubuntu 20.04 + Docker and wait until VM is ready
        id: container_creation
        run: |
          export instanceId=$(aws ec2 run-instances \
            --image-id ${{ env.ami-ubuntu-docker }} \
            --count 1 --instance-type ${{ env.ec2-instance-type }} \
            --block-device-mapping DeviceName=/dev/sda1,Ebs={VolumeSize=${{ env.ec2-volume-size }}} \
            --instance-initiated-shutdown-behavior terminate \
            --iam-instance-profile ${{ env.iam-instance-profile-ssm }} \
            --query 'Instances[0].InstanceId' --output text)
          aws ec2 wait instance-status-ok --instance-ids $instanceId
          echo "##[set-output name=instance_id;]$instanceId"
      # adds the deployment key for the SEALion repository on the Github Action runner VM; it is then copied via the
      # SEALion dockerfile into the container
      - name: If this is SEALion - store repositories deployment key on runner VM
        if: matrix.tool == 'SEALion'
        run: echo "${{ secrets.SEALION_DEPLOYMENT_PRIVATE_KEY }}" > id_rsa
      # run the benchmark on the EC2 VM and shut it down afterward (this leads to termination due to the set termination policy)
      - name: invoke benchmark via AWS SSM
        uses: peterkimzz/aws-ssm-send-command@1.0.1
        id: ssm
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          instance-ids: ${{ steps.container_creation.outputs.instance_id }}
          working-directory: /root
          command: |
            echo "sudo halt" | at now + ${{ env.instance-termination-timeout }} minutes
            mkdir -p /root/.ssh/
            echo "${{ secrets.SOK_DEPLOYMENT_PRIVATE_KEY }}" > /root/.ssh/id_rsa
            chmod 600 /root/.ssh/id_rsa; ssh-keyscan github.com >> /root/.ssh/known_hosts
            ssh-agent bash -c 'ssh-add /root/.ssh/id_rsa; git clone git@github.com:MarbleHE/SoK.git'
            cd /root/SoK/${{ matrix.tool }}
            docker run \
              -e S3_URL=${{ env.s3-repository-url }} \
              -e S3_FOLDER=${{ needs.setup.outputs.ts }} \
              -e AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }} \
              -e AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }} \
              -e AWS_DEFAULT_REGION=${{ env.AWS_DEFAULT_REGION }} --rm $(docker build -q .)
            shutdown -h now
      # print command ID that is helpful to debug execution of SSH command (alternatively, connect to VM via web session as it does not have a SSH key)
      - name: Print command ID
        run: echo -e "The Command ID is ${{ steps.ssm.outputs.command-id }}.\nRun 'aws ssm list-command-invocations --command-id ${{ steps.ssm.outputs.command-id }} --details' in AWS CLI to see task progress."
      - name: Block execution of workflow until benchmark finishes
        run: |
          COUNTER=1
          until [[ $(aws ec2 describe-instance-status --instance-ids ${{ steps.container_creation.outputs.instance_id }} --query 'InstanceStatuses[0].InstanceState.Name' --output text) != "running" ]];
          do
            if [ "$COUNTER" -eq "${{ env.instance-termination-timeout }}" ]; then
              echo "Timeout: Instance did not stop after ${{ env.instance-termination-timeout }} minutes. Ignoring and continuing workflow run."
            fi
            sleep 60;
            COUNTER=$(( $COUNTER + 1 ))
          done

  generate-plots:
    # wait until all benchmark runs finish
    needs: run-benchmarks
    runs-on: ubuntu-20.04
    steps:
      - name: Check out the SoK repository and cd into repository folder
        uses: actions/checkout@v2
      - name: Copy plotting scripts from repository to S3
        run: aws s3 cp --recursive scripts/plotting ${{ env.s3-repository-url }}/${{ needs.setup.outputs.ts }}/plot/ --include "*.py"
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Cache pip packages
        uses: actions/cache@v2
        with:
          # This path is specific to Ubuntu
          path: ~/.cache/pip
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-pip-${{ hashFiles('scripts/plotting/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: Install dependencies
        run: pip install -r scripts/plotting/requirements.txt
      - name: Generate plots and upload plots to S3
        run: python scripts/plotting/plot_all.py
